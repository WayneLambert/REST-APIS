version: '3.7'

services:
  postgres:
    container_name: portfolio_postgres
    build:
      context: ./docker/postgres
    restart: always
    env_file:
      - prod.env
      - .env
      - postgres.env
    volumes:
      - type: volume
        source: postgres_volume
        target: /var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - postgres_network

  web:
    container_name: portfolio_web
    build:
      dockerfile: ./docker/prod/web/Dockerfile
      context: .
    restart: on-failure
    env_file:
      - .env
      - prod.env
      - postgres.env
    volumes:
      - static_volume:/code/staticfiles
      - media_volume:/code/media
    ports:
      - "8000:8000"
    command: gunicorn ab_back_end.wsgi:application --bind 0.0.0.0:8000 --workers=3
    depends_on:
      - postgres
    networks:
      - postgres_network
      - nginx_network

  nginx:
    container_name: portfolio_nginx
    build:
      dockerfile: ./docker/prod/nginx/Dockerfile
      context: .
    restart: always
    ports:
      - "80:80"
      # - "443:443"
    volumes:
      - static_volume:/code/staticfiles
      - media_volume:/code/media
      # - ./docker/prod/nginx:/etc/nginx/conf.d
      # - ./docker/prod/certbot/conf:/etc/letsencrypt
      # - ./docker/prod/certbot/www:/var/www/certbot
    depends_on:
      - web
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"
    networks:
      - nginx_network

  # certbot:
  #   container_name: portfolio_certbot
  #   build:
  #     dockerfile: ./docker/prod/certbot/Dockerfile
  #     context: .
  #   restart: unless-stopped
  #   volumes:
  #     - ./docker/prod/certbot/conf:/etc/letsencrypt
  #     - ./docker/prod/certbot/www:/var/www/certbot
  #   depends_on:
  #     - nginx
  #     - web
  #   command: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
  #   networks:
  #     - nginx_network

networks:
  nginx_network:
    driver: bridge
  postgres_network:
    driver: bridge

volumes:
  postgres_volume:
  static_volume:
  media_volume: