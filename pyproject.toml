# -- POETRY CONFIG ----------------------------------------------------------------------

[tool.poetry]
name = "portfolio"
version = "1.0.0"
description = "Portfolio"
authors = ["Wayne Lambert <admin@waynelambert.dev>"]

[tool.poetry.dependencies]
python = "==3.9.6"
django = "==3.2.7"
djangorestframework = "==3.12.4"
django-crispy-forms = "==1.12.0"
django-recaptcha = "==2.0.6"
django-widget-tweaks = "==1.4.8"
django-shapeshifter = "==18.9.23"
django-guardian = "==2.4.0"
django-axes = "==5.23.0"
django-storages = "==1.11.1"
django-ses = "==2.2.1"
django-filter = "==2.4.0"
django-tinymce = "==3.3.0"
django-bootstrap4 = "==3.0.1"
django-two-factor-auth = "==1.13.1"
django-cryptography = "==1.0"
dj-database-url = "==0.5.0"
psycopg2-binary = "==2.9.1"
gunicorn = "==20.1.0"
whitenoise = "==5.3.0"
requests = "==2.26.0"
beautifulsoup4 = "==4.9.3"
markdown = "==3.3.4"
boto3 = "==1.18.31"
pygments = "==2.8.1"
pillow = "==8.3.2"
phonenumbers = "==8.12.27"

[tool.poetry.dev-dependencies]
django-debug-toolbar = "==3.2.2"
django-debug-toolbar-template-profiler = "==2.0.2"
django-extensions = "==3.1.3"
pytest = "==6.2.5"
coverage = "==5.5"
pytest-django = "==4.4.0"
pytest-cov = "==2.12.1"
pytest-pythonpath = "==0.7.3"
pytest-factoryboy = "==2.1.0"
mixer = "==7.1.2"
hypothesis = "==6.19.0"
django-coverage-plugin = "==2.0.0"
autopep8 = "==1.5.6"
ptvsd = "==4.3.2"
dj-database-url = "==0.5.0"
bandit = "==1.7.0"
interrogate = "==1.4.0"
wily = "==1.20.0"
bpython = "==0.21"
pylint = "==2.10.2"
pylint-django = "==2.4.4"
pycodestyle = "==2.7.0"
ipdb = "==0.13.9"
ipython = "==7.27.0"
rich = "==10.9.0"
pytest-randomly = "==3.10.1"
pytest-vcr = "==1.0.2"
pdbpp = "==0.10.2"
pytest-mock = "==3.6.1"
pytest-xdist = "==2.3.0"
pywatchman = "==1.4.1"
psycopg2-binary = "==2.9.1"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

# -- PYLINT CONFIG ----------------------------------------------------------------------

[tool.pylint.master]
jobs = "0"  # Auto-detect the number of processors
fail-under = "10"
ignore-patterns = '''
  \.eggs
  |_build
  |\.git
  |\.hg
  |\.mypy_cache
  |\.tox
  |\.venv
  |buck-out
  |build
  |conf.py
  |dist
'''
persistent = "no"
load-plugins = ["pylint_django"]
limit-inference-results = "100"
suggestion-mode = "yes"
unsafe-load-any-extension = "no"
extension-pkg-whitelist = ""
exit-zero = "no"
from-stdin = "no"

[tool.pylint.message_control]
enable = [
  "F",  # Fatal
  "E",  # Error
  "W",  # Warning
  "R",  # Refactor
  "C",  # Convention
  "I",  # Informational
]
disable = """
  attribute-defined-outside-init,
  line-too-long,
  missing-class-docstring,
  missing-function-docstring,
  missing-module-docstring,
  no-self-use,
"""

[tool.pylint.reports]
reports = "no"
msg-template = "{path}:{line}: [{msg_id}({symbol}), {obj}] {msg}"
output-format = "colorized"
score = "no"

[tool.pylint.format]
max-line-length = "99"

[tool.pylint.basic]
good-names = "_, qs, pk"

[tool.pylint.miscellaneous]
notes="TODO, FIXME, DEBUG"

# -- BLACK CONFIG -----------------------------------------------------------------------

[tool.black]
line-length = 99
skip-string-normalization = true
diff = true
include = '\.pyi?$'
exclude = '''
/(
    \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | migrations
)/
'''

# -- ISORT CONFIG -----------------------------------------------------------------------

[tool.isort]
atomic = true
line_length = 89
include_trailing_comma = true
force_single_line = false
lines_after_imports = 2
lines_between_types = 1
use_parentheses = true
skip_glob = "*/.venv/*, */node_modules/*, */.git/*, */migrations/*"
known_django = "django"
known_third_party = [
  "PIL", "bs4", "captcha", "dj_database_url", "factory", "hypothesis", "mixer",
  "pytest", "requests", "rest_framework", "shapeshifter", "tinymce"
]
sections = ["FUTURE", "STDLIB", "DJANGO", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]

# -- COVERAGE CONFIG --------------------------------------------------------------------

[tool.coverage]
  [tool.coverage.run]
    branch = true
    parallel = true
    source = ["."]
    omit = [
      ".hypothesis/*",
      ".pytest_cache/*",
      ".venv/*",
      "*__init__.py",
      "*__pycache__",
      "*/aa_project/settings/dev.py",
      "*/aa_project/settings/pytest/pytest.py",
      "*/distutils/*",
      "*/node_modules/*",
      "*/site-packages/*",
      "*/static/*",
      "*/staticfiles/*",
      "*/tests/test*.py",
      "*/users/signals.py",
      "*admin.py*",
      "*apps.py",
      "*asgi.py",
      "*conftest.py",
      "*feeds.py",
      "*migrations/*",
      "*sitemap.py",
      "*wsgi.py",
      "manage.py",
    ]

  [tool.coverage.report]
    # fail_under = 95
    skip_covered = false
    show_missing = true
    precision = 2
    exclude_lines = [
      "def __repr__",
      "def __str__",
      "if __name__ == .__main__.:",
      "if 0:",
      "if DEBUG:",
      "if not DEBUG:",
      "if self.debug:",
      "if settings.DEBUG:",
      "pragma: no cover",
      "raise AssertionError",
      "raise NotImplementedError",
    ]
    omit = [
      "venv/*",
      "tests/*",
      "setup.py",
      "*/__main__.py",
    ]
