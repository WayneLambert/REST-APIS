# -- POETRY CONFIG ----------------------------------------------------------------------

[tool.poetry]
name = "portfolio"
version = "1.0.0"
description = "Portfolio"
authors = ["Wayne Lambert <wayne.a.lambert@gmail.com>"]

[tool.poetry.dependencies]
python = "==3.9.10"
django = "==4.0.6"
djangorestframework = "==3.13.1"
django-crispy-forms = "==1.14.0"
django-recaptcha = "3.0.0"
django-widget-tweaks = "==1.4.12"
django-shapeshifter = "==18.9.23"
django-guardian = "==2.4.0"
django-axes = "==5.31.0"
django-storages = "==1.12.3"
django-ses = "==2.5.0"
django-filter = "==21.1"
django-tinymce = "==3.4.0"
django-bootstrap4 = "==21.2"
django-two-factor-auth = "==1.13.2"
psycopg2-binary = "2.9.3"
dj-database-url = "==0.5.0"
gunicorn = "==20.1.0"
whitenoise = "6.0.0"
requests = "==2.27.1"
beautifulsoup4 = "==4.10.0"
markdown = "==3.3.4"
boto3 = "1.21.3"
pygments = "==2.11.2"
pillow = "==9.0.1"
phonenumbers = "==8.12.43"
django-encrypted-model-fields = "0.6.1"

[tool.poetry.dev-dependencies]
django-debug-toolbar = "3.2.4"
django-extensions = "3.1.5"
pytest = "7.0.1"
coverage = "6.3.1"
pytest-django = "4.5.2"
pytest-cov = "3.0.0"
pytest-factoryboy = "==2.1.0"
mixer = "7.2.1"
hypothesis = "6.37.0"
django-coverage-plugin = "2.0.2"
autopep8 = "1.6.0"
ptvsd = "==4.3.2"
dj-database-url = "==0.5.0"
bandit = "1.7.2"
interrogate = "1.5.0"
wily = "==1.20.0"
bpython = "0.22.1"
pylint = "2.12.2"
pylint-django = "2.5.2"
pycodestyle = "2.8.0"
ipdb = "==0.13.9"
ipython = "7.31.1"
rich = "11.2.0"
pytest-randomly = "3.11.0"
pytest-vcr = "==1.0.2"
pdbpp = "0.10.3"
pytest-mock = "3.7.0"
pytest-xdist = "2.5.0"
pywatchman = "==1.4.1"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

# -- PYLINT CONFIG ----------------------------------------------------------------------

[tool.pylint.master]
jobs = "0"  # Auto-detect the number of processors
fail-under = "10"
ignore-patterns = '''
  \.eggs
  |_build
  |\.git
  |\.hg
  |\.mypy_cache
  |\.tox
  |\.venv
  |buck-out
  |build
  |conf.py
  |dist
'''
persistent = "no"
load-plugins = ["pylint_django"]
limit-inference-results = "100"
suggestion-mode = "yes"
unsafe-load-any-extension = "no"
extension-pkg-whitelist = ""
exit-zero = "no"
from-stdin = "no"

[tool.pylint.message_control]
enable = [
  "F",  # Fatal
  "E",  # Error
  "W",  # Warning
  "R",  # Refactor
  "C",  # Convention
  "I",  # Informational
]
disable = """
  attribute-defined-outside-init,
  line-too-long,
  missing-class-docstring,
  missing-function-docstring,
  missing-module-docstring,
  no-self-use,
"""

[tool.pylint.reports]
reports = "no"
msg-template = "{path}:{line}: [{msg_id}({symbol}), {obj}] {msg}"
output-format = "colorized"
score = "no"

[tool.pylint.format]
max-line-length = "99"

[tool.pylint.basic]
good-names = "_, qs, pk"

[tool.pylint.miscellaneous]
notes="TODO, FIXME, DEBUG"

# -- BLACK CONFIG -----------------------------------------------------------------------

[tool.black]
line-length = 99
skip-string-normalization = true
diff = true
include = '\.pyi?$'
exclude = '''
/(
    \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | migrations
)/
'''

# -- ISORT CONFIG -----------------------------------------------------------------------

[tool.isort]
atomic = true
line_length = 89
include_trailing_comma = true
force_single_line = false
lines_after_imports = 2
lines_between_types = 1
use_parentheses = true
skip_glob = "*/.venv/*, */node_modules/*, */.git/*, */migrations/*"
known_django = "django"
known_third_party = [
  "PIL", "bs4", "captcha", "dj_database_url", "factory", "hypothesis", "mixer",
  "pytest", "requests", "rest_framework", "shapeshifter", "tinymce"
]
sections = ["FUTURE", "STDLIB", "DJANGO", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]

# -- PYTEST CONFIG ----------------------------------------------------------------------
[tool.pytest.ini_options]
minversion = "6.0"
django_find_project = true
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"

addopts = [
    "--ds=aa_project.settings.pytest.pytest",
    "--reuse-db",
    "--nomigrations",
    "--fail-on-template-vars",
    "--doctest-modules",
    "--showlocals",
    "--strict-markers",
    "--ignore=.venv",
    "--cov=.",
    "--cov-report=html",
    "--randomly-dont-reorganize",
    "--numprocesses=auto",

    # Uses iPDB for `--trace` debugging
    "--pdbcls=IPython.terminal.debugger:TerminalPdb",
    # Uses pdb++ for `--trace` debugging
    # --pdb
]

norecursedirs = [
    ".* build",
    "dist",
    "*.egg",
    "node_modules",
    "media",
    ".venv",
    "scss",
    "docs",
    ".git",
    "static",
    "staticfiles",
    "docker",
    "htmlcov",
]

testpaths = [
    "aa_project/tests",
    "apps/api/tests",
    "apps/blog/tests",
    "apps/contacts/tests",
    "apps/countdown_letters/tests",
    "apps/countdown_numbers/tests",
    "apps/cv/tests",
    "apps/pages/tests",
    "apps/roulette/tests",
    "apps/scraping/tests",
    "apps/text_analysis/tests",
    "apps/users/tests",
]

filterwarnings = [
    "ignore::django.utils.deprecation.RemovedInDjango41Warning",
    "ignore::django.utils.deprecation.RemovedInDjango50Warning",
]

# Command Line Options
console_output_style = "progress"
log_cli = true
log_cli_level = "WARNING"
log_cli_format = "%(asctime)s %(levelname)s %(message)s"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"

# Log Options
log_level = "INFO"
log_date_format = "%Y-%m-%d %H:%M:%S"
log_format = "%(asctime)s %(levelname)s %(message)s"

# Log File Options
log_file = "logs/pytest/pytest_logs.log"
log_file_level = "DEBUG"
log_file_format = "%(asctime)s %(levelname)s %(message)s"
log_file_date_format = "%Y-%m-%d %H:%M:%S"

# -- COVERAGE CONFIG --------------------------------------------------------------------

[tool.coverage]
  [tool.coverage.run]
    branch = true
    parallel = true
    source = ["."]
    omit = [
      ".hypothesis/*",
      ".pytest_cache/*",
      ".venv/*",
      "*__init__.py",
      "*__pycache__",
      "*/aa_project/settings/dev.py",
      "*/aa_project/settings/pytest/pytest.py",
      "*/distutils/*",
      "*/node_modules/*",
      "*/site-packages/*",
      "*/static/*",
      "*/staticfiles/*",
      "*/tests/test*.py",
      "*/users/signals.py",
      "*admin.py*",
      "*apps.py",
      "*asgi.py",
      "*conftest.py",
      "*feeds.py",
      "*migrations/*",
      "*sitemap.py",
      "*wsgi.py",
      "manage.py",
    ]

  [tool.coverage.report]
    # fail_under = 95
    skip_covered = false
    show_missing = true
    precision = 2
    exclude_lines = [
      "def __repr__",
      "def __str__",
      "if __name__ == .__main__.:",
      "if 0:",
      "if DEBUG:",
      "if not DEBUG:",
      "if self.debug:",
      "if settings.DEBUG:",
      "pragma: no cover",
      "raise AssertionError",
      "raise NotImplementedError",
    ]
    omit = [
      "venv/*",
      "tests/*",
      "setup.py",
      "*/__main__.py",
    ]

# -- BANDIT CONFIG --------------------------------------------------------------------

[tool.bandit]
targets = [
  "/code/"
]
exclude = [
  ".venv/*",
  "*apps.py",
  "*/migrations/*",
  "test_*.py",
  "*/node_modules/*",
  "./cacheback/*",
  "*/static/*",
  "*/staticfiles/*",
  "*/tests/test*.py",
  ".pytest_cache/*",
  ".hypothesis/*",
  "*wsgi.py",
  "*asgi.py",
  "manage.py",
  "*__init__.py",
  "*__pycache__",
  "*/site-packages/*",
  "*/distutils/*",
  "*/.git/*",
  ".github/*",
  "*/scss/*",
  "*/htmlcov/*",
  "*/logs/*",
  "*/media/*",
]
